name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, dev ]

# Cancel previous workflows on new push
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      integration: ${{ steps.changes.outputs.integration }}
      workflows: ${{ steps.changes.outputs.workflows }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            integration:
              - 'custom_components/tsuryphone/**'
              - 'requirements*.txt'
              - 'pyproject.toml'
            workflows:
              - '.github/workflows/**'
            docs:
              - '*.md'
              - 'docs/**'

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better diff analysis
          fetch-depth: 0

      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Check for conventional commit format (optional but recommended)
          if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?\!?:\ .+ ]]; then
            echo "✅ PR title follows conventional commit format"
          else
            echo "ℹ️ PR title doesn't follow conventional commit format (optional)"
            echo "Consider using: feat/fix/docs/etc: description"
          fi
          
          # Check title length
          if [ ${#PR_TITLE} -gt 72 ]; then
            echo "⚠️ PR title is quite long (${#PR_TITLE} chars). Consider shortening."
          fi
          
          echo "PR title: $PR_TITLE"

      - name: Check for breaking changes
        run: |
          # Check if this PR might contain breaking changes
          git diff origin/${{ github.base_ref }}..HEAD --name-only | grep -E "(manifest\.json|__init__\.py|const\.py)" && {
            echo "⚠️ This PR modifies core files that might contain breaking changes"
            echo "Please ensure backward compatibility or update the version appropriately"
          } || echo "✅ No core files modified"

      - name: Analyze diff size
        run: |
          ADDED=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum+=$1} END {print sum}')
          DELETED=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum+=$2} END {print sum}')
          FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | wc -l)
          
          echo "📊 **PR Statistics:**" >> $GITHUB_STEP_SUMMARY
          echo "- Files changed: $FILES" >> $GITHUB_STEP_SUMMARY
          echo "- Lines added: $ADDED" >> $GITHUB_STEP_SUMMARY
          echo "- Lines deleted: $DELETED" >> $GITHUB_STEP_SUMMARY
          echo "- Net change: $((ADDED - DELETED))" >> $GITHUB_STEP_SUMMARY
          
          # Warn for very large PRs
          if [ $FILES -gt 20 ] || [ $ADDED -gt 1000 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ This is a large PR. Consider breaking it into smaller, focused PRs." >> $GITHUB_STEP_SUMMARY
          fi

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.integration == 'true'
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install homeassistant
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          echo "Running ruff linting..."
          ruff check custom_components/tsuryphone/ --output-format=github

      - name: Run type checking
        run: |
          echo "Running mypy type checking..."
          mypy custom_components/tsuryphone/

      - name: Test integration imports
        run: |
          cd custom_components/tsuryphone
          python -c "
          import sys
          modules = ['const', 'models', 'api_client', 'coordinator', 'resilience', 'services']
          for module in modules:
              try:
                  __import__(module)
                  print(f'✅ {module}')
              except Exception as e:
                  print(f'❌ {module}: {e}')
                  sys.exit(1)
          "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.integration == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install security tools
        run: |
          pip install bandit[toml] semgrep

      - name: Run bandit
        run: |
          bandit -r custom_components/tsuryphone/ -f json -o bandit-results.json || true
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          if bandit -r custom_components/tsuryphone/; then
            echo "✅ No security issues found by bandit" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Potential security issues found. Please review." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run semgrep
        run: |
          semgrep --config=auto custom_components/tsuryphone/ --json -o semgrep-results.json || true

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results-py${{ matrix.python-version || '3.12' }}
          path: |
            bandit-results.json
            semgrep-results.json

  manifest-validation:
    name: Manifest Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.integration == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate manifest.json
        run: |
          python -c "
          import json
          import sys
          from pathlib import Path
          
          manifest_path = Path('custom_components/tsuryphone/manifest.json')
          
          try:
              with open(manifest_path) as f:
                  manifest = json.load(f)
          except Exception as e:
              print(f'❌ Failed to load manifest: {e}')
              sys.exit(1)
          
          # Required fields
          required = ['domain', 'name', 'version', 'documentation', 'issue_tracker', 'codeowners']
          missing = [field for field in required if field not in manifest]
          
          if missing:
              print(f'❌ Missing required fields: {missing}')
              sys.exit(1)
          
          # Validate domain
          if manifest['domain'] != 'tsuryphone':
              print(f'❌ Invalid domain: {manifest[\"domain\"]} (expected: tsuryphone)')
              sys.exit(1)
          
          # Validate version format
          import re
          version = manifest['version']
          if not re.match(r'^\d+\.\d+\.\d+(-\w+)?$', version):
              print(f'❌ Invalid version format: {version}')
              sys.exit(1)
          
          print(f'✅ Manifest validation passed')
          print(f'  Domain: {manifest[\"domain\"]}')
          print(f'  Name: {manifest[\"name\"]}')  
          print(f'  Version: {manifest[\"version\"]}')
          print(f'  Requirements: {len(manifest.get(\"requirements\", []))} packages')
          "

  workflow-validation:
    name: Workflow Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.workflows == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate workflow syntax
        run: |
          # Install yamllint for workflow validation
          pip install yamllint
          
          echo "Validating workflow files..."
          for workflow in .github/workflows/*.yml; do
            echo "Checking $workflow"
            yamllint "$workflow" || exit 1
            echo "✅ $workflow"
          done

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.integration == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install tools
        run: |
          pip install radon complexity-report

      - name: Analyze code complexity
        run: |
          echo "## Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Cyclomatic complexity
          echo "### Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
          radon cc custom_components/tsuryphone/ -a -s >> complexity.txt || true
          
          if [ -s complexity.txt ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat complexity.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Count lines of code
          TOTAL_LINES=$(find custom_components/tsuryphone -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')
          FILE_COUNT=$(find custom_components/tsuryphone -name "*.py" | wc -l)
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- Total Python files: $FILE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Total lines of code: $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY
          echo "- Average lines per file: $((TOTAL_LINES / FILE_COUNT))" >> $GITHUB_STEP_SUMMARY

  comment-summary:
    name: Comment Summary
    runs-on: ubuntu-latest
    needs: [pr-validation, integration-tests, security-scan, manifest-validation]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              validation: '${{ needs.pr-validation.result }}',
              integration: '${{ needs.integration-tests.result }}',
              security: '${{ needs.security-scan.result }}',
              manifest: '${{ needs.manifest-validation.result }}'
            };
            
            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            };
            
            const body = `## PR Validation Results
            
            | Check | Status |
            |-------|--------|
            | PR Validation | ${getEmoji(results.validation)} |
            | Integration Tests | ${getEmoji(results.integration)} |
            | Security Scan | ${getEmoji(results.security)} |
            | Manifest Validation | ${getEmoji(results.manifest)} |
            
            ${Object.values(results).every(r => r === 'success') ? 
              '🎉 All checks passed! This PR is ready for review.' :
              '⚠️ Some checks failed. Please address the issues above.'}
            
            ---
            *This comment was automatically generated by the PR validation workflow.*`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(
              comment => comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }