name: HACS Validation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  hacs-validation:
    name: HACS Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Validate HACS configuration
        run: |
          echo "Validating HACS configuration..."
          
          # Check hacs.json exists and is valid JSON
          if [ ! -f "hacs.json" ]; then
            echo "❌ hacs.json file not found"
            exit 1
          fi
          
          python -c "
          import json
          import sys
          
          try:
              with open('hacs.json', 'r') as f:
                  hacs_config = json.load(f)
              print('✅ hacs.json is valid JSON')
              
              # Check required 'name' field
              if 'name' not in hacs_config:
                  print('❌ Missing required \"name\" field in hacs.json')
                  sys.exit(1)
              
              print(f'✅ HACS name: {hacs_config[\"name\"]}')
              
              # Validate optional fields
              if 'homeassistant' in hacs_config:
                  print(f'✅ Minimum HA version: {hacs_config[\"homeassistant\"]}')
              
              if 'content_in_root' in hacs_config:
                  print(f'✅ Content in root: {hacs_config[\"content_in_root\"]}')
                  
          except json.JSONDecodeError as e:
              print(f'❌ Invalid JSON in hacs.json: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'❌ Error validating hacs.json: {e}')
              sys.exit(1)
          "

      - name: Validate integration structure for HACS
        run: |
          echo "Validating integration structure for HACS..."
          
          python -c "
          import os
          import json
          import sys
          from pathlib import Path
          
          # Check integration directory structure
          integration_path = Path('custom_components/tsuryphone')
          if not integration_path.exists():
              print('❌ Integration directory not found')
              sys.exit(1)
          
          print('✅ Integration directory exists')
          
          # Check required files
          required_files = ['__init__.py', 'manifest.json']
          for file in required_files:
              file_path = integration_path / file
              if not file_path.exists():
                  print(f'❌ Required file missing: {file}')
                  sys.exit(1)
              print(f'✅ {file}')
          
          # Validate manifest.json for HACS requirements
          manifest_path = integration_path / 'manifest.json'
          with open(manifest_path, 'r') as f:
              manifest = json.load(f)
          
          hacs_required_keys = ['domain', 'name', 'version', 'documentation', 'issue_tracker', 'codeowners']
          for key in hacs_required_keys:
              if key not in manifest:
                  print(f'❌ Missing required manifest key for HACS: {key}')
                  sys.exit(1)
              print(f'✅ Manifest key: {key} = {manifest[key]}')
          
          print('✅ All HACS requirements met')
          "

      - name: Check repository structure
        run: |
          echo "Checking repository structure..."
          
          # Verify single integration per repository
          integration_count=$(find custom_components -mindepth 1 -maxdepth 1 -type d | wc -l)
          if [ $integration_count -ne 1 ]; then
            echo "❌ Repository must contain exactly one integration (found: $integration_count)"
            exit 1
          fi
          echo "✅ Single integration repository"
          
          # Check for README.md
          if [ ! -f "README.md" ]; then
            echo "⚠️ README.md not found (recommended for HACS)"
          else
            echo "✅ README.md exists"
          fi

      - name: Validate with hassfest
        run: |
          echo "Running hassfest validation..."
          pip install homeassistant
          python -m script.hassfest --integration-path custom_components/tsuryphone/ || {
            echo "⚠️ hassfest validation failed - check integration structure"
            exit 1
          }
          echo "✅ hassfest validation passed"

      - name: HACS Summary
        run: |
          echo "## HACS Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Repository is HACS-ready!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Requirements Met:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Single integration per repository" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Correct directory structure (custom_components/tsuryphone/)" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Valid hacs.json configuration file" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Complete manifest.json with all required keys" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ README.md documentation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Home Assistant integration validation (hassfest)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps for HACS Publication:" >> $GITHUB_STEP_SUMMARY
          echo "1. 🏷️ Create a GitHub release (recommended)" >> $GITHUB_STEP_SUMMARY
          echo "2. 📝 Submit to [HACS default repositories](https://github.com/hacs/default) if desired" >> $GITHUB_STEP_SUMMARY
          echo "3. 🔗 Users can add as custom repository: \`https://github.com/your-org/ha-tsuryphone\`" >> $GITHUB_STEP_SUMMARY